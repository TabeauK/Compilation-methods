// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-QPDU20S
// DateTime: 30/06/2020 20:25:12
// UserName: krzys
// Input file <C:\Users\krzys\Desktop\MTT\MTT\kompilator.y - 30/06/2020 20:25:05>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GardensPoint
{
public enum Tokens {error=128,EOF=129,Or=130,And=131,Equals=132,
    NotEquals=133,GreaterEqual=134,LessEqual=135,Int=136,Double=137,Bool=138,
    Program=139,If=140,Else=141,While=142,Read=143,Write=144,
    Return=145,Ident=146,IntNumber=147,RealNumber=148,BoolValue=149,StringValue=150};

public struct ValueType
#line 4 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
{
public string val;
public int line;
public Tree node;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[56];
  private static State[] states = new State[112];
  private static string[] nonTerms = new string[] {
      "start", "$accept", "block", "declarations", "operations", "declaration", 
      "operation", "assignable", "logical", "relative", "additive", "multiplicative", 
      "bitwise", "unary", "value", };

  static Parser() {
    states[0] = new State(new int[]{139,3,128,111},new int[]{-1,1});
    states[1] = new State(new int[]{129,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{123,4});
    states[4] = new State(new int[]{137,98,136,101,138,104,128,107,140,-9,142,-9,145,-9,143,-9,144,-9,146,-9,33,-9,126,-9,45,-9,40,-9,147,-9,148,-9,149,-9,123,-9,125,-9},new int[]{-3,5,-4,8,-6,96});
    states[5] = new State(new int[]{125,6});
    states[6] = new State(new int[]{129,7});
    states[7] = new State(-2);
    states[8] = new State(new int[]{140,12,142,19,145,24,143,26,144,29,146,34,33,48,126,50,45,52,40,54,147,59,148,60,149,61,123,93,125,-11},new int[]{-5,9,-7,10,-8,91,-9,37,-10,68,-11,88,-12,79,-13,78,-14,77,-15,58});
    states[9] = new State(-4);
    states[10] = new State(new int[]{140,12,142,19,145,24,143,26,144,29,146,34,33,48,126,50,45,52,40,54,147,59,148,60,149,61,123,93,125,-11},new int[]{-5,11,-7,10,-8,91,-9,37,-10,68,-11,88,-12,79,-13,78,-14,77,-15,58});
    states[11] = new State(-10);
    states[12] = new State(new int[]{40,13});
    states[13] = new State(new int[]{146,34,33,48,126,50,45,52,40,54,147,59,148,60,149,61},new int[]{-8,14,-9,37,-10,68,-11,88,-12,79,-13,78,-14,77,-15,58});
    states[14] = new State(new int[]{41,15});
    states[15] = new State(new int[]{140,12,142,19,145,24,143,26,144,29,146,34,33,48,126,50,45,52,40,54,147,59,148,60,149,61,123,93},new int[]{-7,16,-8,91,-9,37,-10,68,-11,88,-12,79,-13,78,-14,77,-15,58});
    states[16] = new State(new int[]{141,17,140,-15,142,-15,145,-15,143,-15,144,-15,146,-15,33,-15,126,-15,45,-15,40,-15,147,-15,148,-15,149,-15,123,-15,125,-15});
    states[17] = new State(new int[]{140,12,142,19,145,24,143,26,144,29,146,34,33,48,126,50,45,52,40,54,147,59,148,60,149,61,123,93},new int[]{-7,18,-8,91,-9,37,-10,68,-11,88,-12,79,-13,78,-14,77,-15,58});
    states[18] = new State(-16);
    states[19] = new State(new int[]{40,20});
    states[20] = new State(new int[]{146,34,33,48,126,50,45,52,40,54,147,59,148,60,149,61},new int[]{-8,21,-9,37,-10,68,-11,88,-12,79,-13,78,-14,77,-15,58});
    states[21] = new State(new int[]{41,22});
    states[22] = new State(new int[]{140,12,142,19,145,24,143,26,144,29,146,34,33,48,126,50,45,52,40,54,147,59,148,60,149,61,123,93},new int[]{-7,23,-8,91,-9,37,-10,68,-11,88,-12,79,-13,78,-14,77,-15,58});
    states[23] = new State(-17);
    states[24] = new State(new int[]{59,25});
    states[25] = new State(-18);
    states[26] = new State(new int[]{146,27});
    states[27] = new State(new int[]{59,28});
    states[28] = new State(-19);
    states[29] = new State(new int[]{150,32,146,34,33,48,126,50,45,52,40,54,147,59,148,60,149,61},new int[]{-8,30,-9,37,-10,68,-11,88,-12,79,-13,78,-14,77,-15,58});
    states[30] = new State(new int[]{59,31});
    states[31] = new State(-20);
    states[32] = new State(new int[]{59,33});
    states[33] = new State(-21);
    states[34] = new State(new int[]{61,35,124,-54,38,-54,42,-54,47,-54,43,-54,45,-54,62,-54,134,-54,60,-54,135,-54,132,-54,133,-54,131,-54,130,-54,59,-54,41,-54});
    states[35] = new State(new int[]{146,34,33,48,126,50,45,52,40,54,147,59,148,60,149,61},new int[]{-8,36,-9,37,-10,68,-11,88,-12,79,-13,78,-14,77,-15,58});
    states[36] = new State(-24);
    states[37] = new State(new int[]{131,38,130,89,59,-25,41,-25});
    states[38] = new State(new int[]{33,48,126,50,45,52,40,54,147,59,148,60,149,61,146,62},new int[]{-10,39,-11,88,-12,79,-13,78,-14,77,-15,58});
    states[39] = new State(new int[]{62,40,134,69,60,80,135,82,132,84,133,86,131,-26,130,-26,59,-26,41,-26});
    states[40] = new State(new int[]{33,48,126,50,45,52,40,54,147,59,148,60,149,61,146,62},new int[]{-11,41,-12,79,-13,78,-14,77,-15,58});
    states[41] = new State(new int[]{43,42,45,71,62,-29,134,-29,60,-29,135,-29,132,-29,133,-29,131,-29,130,-29,59,-29,41,-29});
    states[42] = new State(new int[]{33,48,126,50,45,52,40,54,147,59,148,60,149,61,146,62},new int[]{-12,43,-13,78,-14,77,-15,58});
    states[43] = new State(new int[]{42,44,47,73,43,-36,45,-36,62,-36,134,-36,60,-36,135,-36,132,-36,133,-36,131,-36,130,-36,59,-36,41,-36});
    states[44] = new State(new int[]{33,48,126,50,45,52,40,54,147,59,148,60,149,61,146,62},new int[]{-13,45,-14,77,-15,58});
    states[45] = new State(new int[]{124,46,38,75,42,-39,47,-39,43,-39,45,-39,62,-39,134,-39,60,-39,135,-39,132,-39,133,-39,131,-39,130,-39,59,-39,41,-39});
    states[46] = new State(new int[]{33,48,126,50,45,52,40,54,147,59,148,60,149,61,146,62},new int[]{-14,47,-15,58});
    states[47] = new State(-42);
    states[48] = new State(new int[]{33,48,126,50,45,52,40,54,147,59,148,60,149,61,146,62},new int[]{-14,49,-15,58});
    states[49] = new State(-45);
    states[50] = new State(new int[]{33,48,126,50,45,52,40,54,147,59,148,60,149,61,146,62},new int[]{-14,51,-15,58});
    states[51] = new State(-46);
    states[52] = new State(new int[]{33,48,126,50,45,52,40,54,147,59,148,60,149,61,146,62},new int[]{-14,53,-15,58});
    states[53] = new State(-47);
    states[54] = new State(new int[]{137,55,136,63,146,34,33,48,126,50,45,52,40,54,147,59,148,60,149,61},new int[]{-8,66,-9,37,-10,68,-11,88,-12,79,-13,78,-14,77,-15,58});
    states[55] = new State(new int[]{41,56});
    states[56] = new State(new int[]{33,48,126,50,45,52,40,54,147,59,148,60,149,61,146,62},new int[]{-14,57,-15,58});
    states[57] = new State(-48);
    states[58] = new State(-50);
    states[59] = new State(-51);
    states[60] = new State(-52);
    states[61] = new State(-53);
    states[62] = new State(-54);
    states[63] = new State(new int[]{41,64});
    states[64] = new State(new int[]{33,48,126,50,45,52,40,54,147,59,148,60,149,61,146,62},new int[]{-14,65,-15,58});
    states[65] = new State(-49);
    states[66] = new State(new int[]{41,67});
    states[67] = new State(-55);
    states[68] = new State(new int[]{62,40,134,69,60,80,135,82,132,84,133,86,131,-28,130,-28,59,-28,41,-28});
    states[69] = new State(new int[]{33,48,126,50,45,52,40,54,147,59,148,60,149,61,146,62},new int[]{-11,70,-12,79,-13,78,-14,77,-15,58});
    states[70] = new State(new int[]{43,42,45,71,62,-30,134,-30,60,-30,135,-30,132,-30,133,-30,131,-30,130,-30,59,-30,41,-30});
    states[71] = new State(new int[]{33,48,126,50,45,52,40,54,147,59,148,60,149,61,146,62},new int[]{-12,72,-13,78,-14,77,-15,58});
    states[72] = new State(new int[]{42,44,47,73,43,-37,45,-37,62,-37,134,-37,60,-37,135,-37,132,-37,133,-37,131,-37,130,-37,59,-37,41,-37});
    states[73] = new State(new int[]{33,48,126,50,45,52,40,54,147,59,148,60,149,61,146,62},new int[]{-13,74,-14,77,-15,58});
    states[74] = new State(new int[]{124,46,38,75,42,-40,47,-40,43,-40,45,-40,62,-40,134,-40,60,-40,135,-40,132,-40,133,-40,131,-40,130,-40,59,-40,41,-40});
    states[75] = new State(new int[]{33,48,126,50,45,52,40,54,147,59,148,60,149,61,146,62},new int[]{-14,76,-15,58});
    states[76] = new State(-43);
    states[77] = new State(-44);
    states[78] = new State(new int[]{124,46,38,75,42,-41,47,-41,43,-41,45,-41,62,-41,134,-41,60,-41,135,-41,132,-41,133,-41,131,-41,130,-41,59,-41,41,-41});
    states[79] = new State(new int[]{42,44,47,73,43,-38,45,-38,62,-38,134,-38,60,-38,135,-38,132,-38,133,-38,131,-38,130,-38,59,-38,41,-38});
    states[80] = new State(new int[]{33,48,126,50,45,52,40,54,147,59,148,60,149,61,146,62},new int[]{-11,81,-12,79,-13,78,-14,77,-15,58});
    states[81] = new State(new int[]{43,42,45,71,62,-31,134,-31,60,-31,135,-31,132,-31,133,-31,131,-31,130,-31,59,-31,41,-31});
    states[82] = new State(new int[]{33,48,126,50,45,52,40,54,147,59,148,60,149,61,146,62},new int[]{-11,83,-12,79,-13,78,-14,77,-15,58});
    states[83] = new State(new int[]{43,42,45,71,62,-32,134,-32,60,-32,135,-32,132,-32,133,-32,131,-32,130,-32,59,-32,41,-32});
    states[84] = new State(new int[]{33,48,126,50,45,52,40,54,147,59,148,60,149,61,146,62},new int[]{-11,85,-12,79,-13,78,-14,77,-15,58});
    states[85] = new State(new int[]{43,42,45,71,62,-33,134,-33,60,-33,135,-33,132,-33,133,-33,131,-33,130,-33,59,-33,41,-33});
    states[86] = new State(new int[]{33,48,126,50,45,52,40,54,147,59,148,60,149,61,146,62},new int[]{-11,87,-12,79,-13,78,-14,77,-15,58});
    states[87] = new State(new int[]{43,42,45,71,62,-34,134,-34,60,-34,135,-34,132,-34,133,-34,131,-34,130,-34,59,-34,41,-34});
    states[88] = new State(new int[]{43,42,45,71,62,-35,134,-35,60,-35,135,-35,132,-35,133,-35,131,-35,130,-35,59,-35,41,-35});
    states[89] = new State(new int[]{33,48,126,50,45,52,40,54,147,59,148,60,149,61,146,62},new int[]{-10,90,-11,88,-12,79,-13,78,-14,77,-15,58});
    states[90] = new State(new int[]{62,40,134,69,60,80,135,82,132,84,133,86,131,-27,130,-27,59,-27,41,-27});
    states[91] = new State(new int[]{59,92});
    states[92] = new State(-22);
    states[93] = new State(new int[]{140,12,142,19,145,24,143,26,144,29,146,34,33,48,126,50,45,52,40,54,147,59,148,60,149,61,123,93,125,-11},new int[]{-5,94,-7,10,-8,91,-9,37,-10,68,-11,88,-12,79,-13,78,-14,77,-15,58});
    states[94] = new State(new int[]{125,95});
    states[95] = new State(-23);
    states[96] = new State(new int[]{137,98,136,101,138,104,140,-9,142,-9,145,-9,143,-9,144,-9,146,-9,33,-9,126,-9,45,-9,40,-9,147,-9,148,-9,149,-9,123,-9,125,-9},new int[]{-4,97,-6,96});
    states[97] = new State(-8);
    states[98] = new State(new int[]{146,99});
    states[99] = new State(new int[]{59,100});
    states[100] = new State(-12);
    states[101] = new State(new int[]{146,102});
    states[102] = new State(new int[]{59,103});
    states[103] = new State(-13);
    states[104] = new State(new int[]{146,105});
    states[105] = new State(new int[]{59,106});
    states[106] = new State(-14);
    states[107] = new State(new int[]{59,108,129,109,125,110});
    states[108] = new State(-5);
    states[109] = new State(-6);
    states[110] = new State(-7);
    states[111] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,129});
    rules[2] = new Rule(-1, new int[]{139,123,-3,125,129});
    rules[3] = new Rule(-1, new int[]{128});
    rules[4] = new Rule(-3, new int[]{-4,-5});
    rules[5] = new Rule(-3, new int[]{128,59});
    rules[6] = new Rule(-3, new int[]{128,129});
    rules[7] = new Rule(-3, new int[]{128,125});
    rules[8] = new Rule(-4, new int[]{-6,-4});
    rules[9] = new Rule(-4, new int[]{});
    rules[10] = new Rule(-5, new int[]{-7,-5});
    rules[11] = new Rule(-5, new int[]{});
    rules[12] = new Rule(-6, new int[]{137,146,59});
    rules[13] = new Rule(-6, new int[]{136,146,59});
    rules[14] = new Rule(-6, new int[]{138,146,59});
    rules[15] = new Rule(-7, new int[]{140,40,-8,41,-7});
    rules[16] = new Rule(-7, new int[]{140,40,-8,41,-7,141,-7});
    rules[17] = new Rule(-7, new int[]{142,40,-8,41,-7});
    rules[18] = new Rule(-7, new int[]{145,59});
    rules[19] = new Rule(-7, new int[]{143,146,59});
    rules[20] = new Rule(-7, new int[]{144,-8,59});
    rules[21] = new Rule(-7, new int[]{144,150,59});
    rules[22] = new Rule(-7, new int[]{-8,59});
    rules[23] = new Rule(-7, new int[]{123,-5,125});
    rules[24] = new Rule(-8, new int[]{146,61,-8});
    rules[25] = new Rule(-8, new int[]{-9});
    rules[26] = new Rule(-9, new int[]{-9,131,-10});
    rules[27] = new Rule(-9, new int[]{-9,130,-10});
    rules[28] = new Rule(-9, new int[]{-10});
    rules[29] = new Rule(-10, new int[]{-10,62,-11});
    rules[30] = new Rule(-10, new int[]{-10,134,-11});
    rules[31] = new Rule(-10, new int[]{-10,60,-11});
    rules[32] = new Rule(-10, new int[]{-10,135,-11});
    rules[33] = new Rule(-10, new int[]{-10,132,-11});
    rules[34] = new Rule(-10, new int[]{-10,133,-11});
    rules[35] = new Rule(-10, new int[]{-11});
    rules[36] = new Rule(-11, new int[]{-11,43,-12});
    rules[37] = new Rule(-11, new int[]{-11,45,-12});
    rules[38] = new Rule(-11, new int[]{-12});
    rules[39] = new Rule(-12, new int[]{-12,42,-13});
    rules[40] = new Rule(-12, new int[]{-12,47,-13});
    rules[41] = new Rule(-12, new int[]{-13});
    rules[42] = new Rule(-13, new int[]{-13,124,-14});
    rules[43] = new Rule(-13, new int[]{-13,38,-14});
    rules[44] = new Rule(-13, new int[]{-14});
    rules[45] = new Rule(-14, new int[]{33,-14});
    rules[46] = new Rule(-14, new int[]{126,-14});
    rules[47] = new Rule(-14, new int[]{45,-14});
    rules[48] = new Rule(-14, new int[]{40,137,41,-14});
    rules[49] = new Rule(-14, new int[]{40,136,41,-14});
    rules[50] = new Rule(-14, new int[]{-15});
    rules[51] = new Rule(-15, new int[]{147});
    rules[52] = new Rule(-15, new int[]{148});
    rules[53] = new Rule(-15, new int[]{149});
    rules[54] = new Rule(-15, new int[]{146});
    rules[55] = new Rule(-15, new int[]{40,-8,41});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // start -> Program, '{', block, '}', EOF
#line 22 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                             { head = ValueStack[ValueStack.Depth-3].node; }
#line default
        break;
      case 3: // start -> error
#line 23 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
         { Console.WriteLine("Syntax error at line {0}",ValueStack[ValueStack.Depth-1].line); Tree.errors++; YYAccept(); }
#line default
        break;
      case 4: // block -> declarations, operations
#line 26 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                           { CurrentSemanticValue.node = new Block(ValueStack[ValueStack.Depth-1].node, ValueStack[ValueStack.Depth-2].node); }
#line default
        break;
      case 5: // block -> error, ';'
#line 27 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
             { Console.WriteLine("Syntax error at line {0}",ValueStack[ValueStack.Depth-1].line); Tree.errors++; }
#line default
        break;
      case 6: // block -> error, EOF
#line 28 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
             { Console.WriteLine("Syntax error at line {0}",ValueStack[ValueStack.Depth-1].line); Tree.errors++; }
#line default
        break;
      case 7: // block -> error, '}'
#line 29 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
             { Console.WriteLine("Syntax error at line {0}",ValueStack[ValueStack.Depth-1].line); Tree.errors++; }
#line default
        break;
      case 8: // declarations -> declaration, declarations
#line 32 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; CurrentSemanticValue.node.children.Insert(0,ValueStack[ValueStack.Depth-2].node); }
#line default
        break;
      case 9: // declarations -> /* empty */
#line 33 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
               { CurrentSemanticValue.node = new Block(); }
#line default
        break;
      case 10: // operations -> operation, operations
#line 36 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; CurrentSemanticValue.node.children.Insert(0,ValueStack[ValueStack.Depth-2].node); }
#line default
        break;
      case 11: // operations -> /* empty */
#line 37 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
               { CurrentSemanticValue.node = new Block(); }
#line default
        break;
      case 12: // declaration -> Double, Ident, ';'
#line 40 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                    { CurrentSemanticValue.node = new Declaration(ValueStack[ValueStack.Depth-2].val, "double", ValueStack[ValueStack.Depth-3].line); }
#line default
        break;
      case 13: // declaration -> Int, Ident, ';'
#line 41 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                 { CurrentSemanticValue.node = new Declaration(ValueStack[ValueStack.Depth-2].val, "int", ValueStack[ValueStack.Depth-3].line); }
#line default
        break;
      case 14: // declaration -> Bool, Ident, ';'
#line 42 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                  { CurrentSemanticValue.node = new Declaration(ValueStack[ValueStack.Depth-2].val, "bool", ValueStack[ValueStack.Depth-3].line); }
#line default
        break;
      case 15: // operation -> If, '(', assignable, ')', operation
#line 45 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                                     { CurrentSemanticValue.node = new If(ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node, ValueStack[ValueStack.Depth-5].line); }
#line default
        break;
      case 16: // operation -> If, '(', assignable, ')', operation, Else, operation
#line 46 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                                                      { CurrentSemanticValue.node = new IfElse(ValueStack[ValueStack.Depth-5].node, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node, ValueStack[ValueStack.Depth-7].line); }
#line default
        break;
      case 17: // operation -> While, '(', assignable, ')', operation
#line 47 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                                      { CurrentSemanticValue.node = new While(ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node, ValueStack[ValueStack.Depth-5].line); }
#line default
        break;
      case 18: // operation -> Return, ';'
#line 48 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
              { CurrentSemanticValue.node = new Return(); }
#line default
        break;
      case 19: // operation -> Read, Ident, ';'
#line 49 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                  { CurrentSemanticValue.node = new Read(ValueStack[ValueStack.Depth-2].val, ValueStack[ValueStack.Depth-3].line); }
#line default
        break;
      case 20: // operation -> Write, assignable, ';'
#line 50 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                        { CurrentSemanticValue.node = new Write(ValueStack[ValueStack.Depth-2].node, ValueStack[ValueStack.Depth-3].line); }
#line default
        break;
      case 21: // operation -> Write, StringValue, ';'
#line 51 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                         { CurrentSemanticValue.node = new Write(ValueStack[ValueStack.Depth-2].val, ValueStack[ValueStack.Depth-3].line); }
#line default
        break;
      case 22: // operation -> assignable, ';'
#line 52 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                  { CurrentSemanticValue.node = new Pop(ValueStack[ValueStack.Depth-2].node, ValueStack[ValueStack.Depth-1].line); }
#line default
        break;
      case 23: // operation -> '{', operations, '}'
#line 53 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                      {CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 24: // assignable -> Ident, '=', assignable
#line 56 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                        { CurrentSemanticValue.node = new Assign(ValueStack[ValueStack.Depth-3].val, ValueStack[ValueStack.Depth-1].node, ValueStack[ValueStack.Depth-2].line); }
#line default
        break;
      case 26: // logical -> logical, And, relative
#line 60 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                        { CurrentSemanticValue.node = new BinaryOperation(ValueStack[ValueStack.Depth-3].node, "&&", ValueStack[ValueStack.Depth-1].node, "bool", ValueStack[ValueStack.Depth-2].line); }
#line default
        break;
      case 27: // logical -> logical, Or, relative
#line 61 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                       { CurrentSemanticValue.node = new BinaryOperation(ValueStack[ValueStack.Depth-3].node, "||", ValueStack[ValueStack.Depth-1].node, "bool", ValueStack[ValueStack.Depth-2].line); }
#line default
        break;
      case 29: // relative -> relative, '>', additive
#line 65 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                         { CurrentSemanticValue.node = new BinaryOperation(ValueStack[ValueStack.Depth-3].node, ">", ValueStack[ValueStack.Depth-1].node, "bool", ValueStack[ValueStack.Depth-2].line); }
#line default
        break;
      case 30: // relative -> relative, GreaterEqual, additive
#line 66 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                                  { CurrentSemanticValue.node = new BinaryOperation(ValueStack[ValueStack.Depth-3].node, ">=", ValueStack[ValueStack.Depth-1].node, "bool", ValueStack[ValueStack.Depth-2].line); }
#line default
        break;
      case 31: // relative -> relative, '<', additive
#line 67 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                         { CurrentSemanticValue.node = new BinaryOperation(ValueStack[ValueStack.Depth-3].node, "<", ValueStack[ValueStack.Depth-1].node, "bool", ValueStack[ValueStack.Depth-2].line); }
#line default
        break;
      case 32: // relative -> relative, LessEqual, additive
#line 68 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                               { CurrentSemanticValue.node = new BinaryOperation(ValueStack[ValueStack.Depth-3].node, "<=", ValueStack[ValueStack.Depth-1].node, "bool", ValueStack[ValueStack.Depth-2].line); }
#line default
        break;
      case 33: // relative -> relative, Equals, additive
#line 69 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                            { CurrentSemanticValue.node = new BinaryOperation(ValueStack[ValueStack.Depth-3].node, "==", ValueStack[ValueStack.Depth-1].node, "bool", ValueStack[ValueStack.Depth-2].line); }
#line default
        break;
      case 34: // relative -> relative, NotEquals, additive
#line 70 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                               { CurrentSemanticValue.node = new BinaryOperation(ValueStack[ValueStack.Depth-3].node, "!=", ValueStack[ValueStack.Depth-1].node, "bool", ValueStack[ValueStack.Depth-2].line); }
#line default
        break;
      case 36: // additive -> additive, '+', multiplicative
#line 74 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                               { CurrentSemanticValue.node = new BinaryOperation(ValueStack[ValueStack.Depth-3].node, "+", ValueStack[ValueStack.Depth-1].node, "number", ValueStack[ValueStack.Depth-2].line); }
#line default
        break;
      case 37: // additive -> additive, '-', multiplicative
#line 75 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                               { CurrentSemanticValue.node = new BinaryOperation(ValueStack[ValueStack.Depth-3].node, "-", ValueStack[ValueStack.Depth-1].node, "number", ValueStack[ValueStack.Depth-2].line); }
#line default
        break;
      case 39: // multiplicative -> multiplicative, '*', bitwise
#line 79 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                              { CurrentSemanticValue.node = new BinaryOperation(ValueStack[ValueStack.Depth-3].node, "*", ValueStack[ValueStack.Depth-1].node, "number", ValueStack[ValueStack.Depth-2].line); }
#line default
        break;
      case 40: // multiplicative -> multiplicative, '/', bitwise
#line 80 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                              { CurrentSemanticValue.node = new BinaryOperation(ValueStack[ValueStack.Depth-3].node, "/", ValueStack[ValueStack.Depth-1].node, "number", ValueStack[ValueStack.Depth-2].line); }
#line default
        break;
      case 42: // bitwise -> bitwise, '|', unary
#line 84 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                     { CurrentSemanticValue.node = new BinaryOperation(ValueStack[ValueStack.Depth-3].node, "|", ValueStack[ValueStack.Depth-1].node, "int", ValueStack[ValueStack.Depth-2].line); }
#line default
        break;
      case 43: // bitwise -> bitwise, '&', unary
#line 85 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                     { CurrentSemanticValue.node = new BinaryOperation(ValueStack[ValueStack.Depth-3].node, "&", ValueStack[ValueStack.Depth-1].node, "int", ValueStack[ValueStack.Depth-2].line); }
#line default
        break;
      case 45: // unary -> '!', unary
#line 89 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
             { CurrentSemanticValue.node = new UnaryOperation(ValueStack[ValueStack.Depth-1].node, "!", "bool", ValueStack[ValueStack.Depth-2].line); }
#line default
        break;
      case 46: // unary -> '~', unary
#line 90 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
             { CurrentSemanticValue.node = new UnaryOperation(ValueStack[ValueStack.Depth-1].node, "~", "int", ValueStack[ValueStack.Depth-2].line); }
#line default
        break;
      case 47: // unary -> '-', unary
#line 91 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
             { CurrentSemanticValue.node = new UnaryOperation(ValueStack[ValueStack.Depth-1].node, "-", "number", ValueStack[ValueStack.Depth-2].line); }
#line default
        break;
      case 48: // unary -> '(', Double, ')', unary
#line 92 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                        { CurrentSemanticValue.node = new UnaryOperation(ValueStack[ValueStack.Depth-1].node, "toDouble", "double", ValueStack[ValueStack.Depth-3].line); }
#line default
        break;
      case 49: // unary -> '(', Int, ')', unary
#line 93 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                     { CurrentSemanticValue.node = new UnaryOperation(ValueStack[ValueStack.Depth-1].node, "toInt", "int", ValueStack[ValueStack.Depth-3].line); }
#line default
        break;
      case 51: // value -> IntNumber
#line 97 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
             { CurrentSemanticValue.node = new Value(ValueStack[ValueStack.Depth-1].val, "int", ValueStack[ValueStack.Depth-1].line); }
#line default
        break;
      case 52: // value -> RealNumber
#line 98 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
              { CurrentSemanticValue.node = new Value(ValueStack[ValueStack.Depth-1].val, "double", ValueStack[ValueStack.Depth-1].line); }
#line default
        break;
      case 53: // value -> BoolValue
#line 99 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
             { CurrentSemanticValue.node = new Value(ValueStack[ValueStack.Depth-1].val, "bool", ValueStack[ValueStack.Depth-1].line); }
#line default
        break;
      case 54: // value -> Ident
#line 100 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
         { CurrentSemanticValue.node = new Value(ValueStack[ValueStack.Depth-1].val, "ident", ValueStack[ValueStack.Depth-1].line); }
#line default
        break;
      case 55: // value -> '(', assignable, ')'
#line 101 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
                      { CurrentSemanticValue.node = new Pointer(ValueStack[ValueStack.Depth-2].node); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 105 "C:\Users\krzys\Desktop\MTT\MTT\kompilator.y"
public Parser(Scanner scanner) : base(scanner) { }
public Tree head;
#line default
}
}
